$(function() {
    function GcodeScannerViewModel(parameters) {
        var self = this;
        self.filesViewModel = parameters[0];  // Get OctoPrint's file manager
        self.files = null; // Will hold the file list
        var _selectedFilePath; // Will hold the selected file path
        var _selectedFileName; // Will hold the selected file name

        
        self.populateDropdown = function() {
            var dropdown = $("#gcode_file_select");
            dropdown.empty();
            dropdown.append('<option value="">-- Choose a file --</option>');

            // üîπ FIX: `filesViewModel` should be a function call.
            // I have the function below but I am keeping this simple to troubleshoot.
            // filesViewModel is a Knockout.js ViewModel for OctoPrint to handle G-code files in our UI
            var filesViewModel = ko.dataFor(document.querySelector("#files_wrapper"));
            if (!filesViewModel) {
                console.log("filesViewModel not found.");
                return;
            }
            
            // üîπ FIX: `allItems` should be a function call.
            // The auto comment above is generated by the IDE.
            var fileList = filesViewModel.allItems();
            if (!fileList || fileList.length === 0) {
                console.log("No G-code files found.");
                return;
            }
        
            fileList.forEach(file => {
                console.log("Adding to dropdown:", file.name, "->", file.path);
                dropdown.append(`<option value="${file.path}">${file.name}</option>`);
            });
        
            console.log("Dropdown updated successfully.");
        };
  
        // Ensure it runs when the page loads
        setTimeout(self.populateDropdown, 2000); // Give time for OctoPrint to load files

        // Populate dropdown on page load
        self.populateDropdown();

        // Adding code for the button to scan the selected file.
        // 

        // This function needs some work. It is using hardcoded paths.
        // Will the hardcoded path work on a Mac or Linux system?
        // We need to find a better way to get the file path.
        self.scanGcode = function() {
            var selectedFile = $("#gcode_file_select").val();
            if (!selectedFile) {
                console.log("No file selected.");
                $("#scan_results").hide().html('<div class="alert alert-danger">‚ö†Ô∏è Please select a G-code file first!</div>').fadeIn();
                return;
            }
        
            var fileUrl = "/downloads/files/local/" + encodeURIComponent(selectedFile);
            console.log("Fetching file from:", fileUrl);
        
            // Fetch G-code file
            $.ajax({
                url: fileUrl,
                type: "GET",
                dataType: "text",
                success: function(data) {
                    console.log("G-code file loaded successfully.");
                    console.log("First 10 lines:\n", data.split("\n").slice(0, 10).join("\n"));
        
                    // Call the process function to scan for G28 commands
                    self.processGcode(data);
                },
                error: function(xhr) {
                    console.log("Failed to fetch G-code file: " + xhr.responseText);
                }
            });
        };
        
        self.processGcode = function(gcodeContent) {
            console.log("Scanning G-code content...");
        
            var detectedIssues = [];
            var gcodeLines = gcodeContent.split("\n"); // Split content into lines
            
            detectedIssues.push(` I used G28 as a test on a good file and it was detected. `);
            // Scan for unsafe commands
            // We are using g28 for testing purposes
            gcodeLines.forEach((line, index) => {
                if (line.includes("G28")) {  // Using G28 as a test
                    detectedIssues.push(`‚ö†Ô∏è Warning: G28 found on Line ${index + 1}: ${line}`);
                }
            });
        
            // Ensure results are updated in the UI
            var resultList = $("#scan_results_list");
            resultList.empty(); // Clear previous results
        
            if (detectedIssues.length === 0) {
                console.log("No unsafe commands detected.");
                resultList.append("<li>No unsafe commands detected.</li>");
            } else {
                console.log("‚ö†Ô∏è Detected Issues:");
                detectedIssues.forEach(issue => {
                    resultList.append("<li>" + issue + "</li>");
                });
            }
        
            $("#scan_results").fadeIn(); // Ensure the results section is visible
        };
        
        

        // Scan Gcode event button
        $("#scan_gcode_button").off("click").on("click", self.scanGcode);        

    }

    // FIX: Moved the function outside of the `GcodeScannerViewModel` to avoid redefining it on every instance.
    // Function to get filesViewModel
    function getFilesViewModel() {
        var filesViewModel = ko.dataFor(document.querySelector("#files_wrapper"));
        if (!filesViewModel) {
            console.log("filesViewModel not found.");
            return null;
        }
        return filesViewModel;
    }

    // Moved function outside of the `GcodeScannerViewModel` to avoid redefining it on every instance.
    function getGcodeFiles() {
        var filesViewModel = getFilesViewModel();
        if (!filesViewModel) return [];

        var fileList = filesViewModel.allItems();
        if (!fileList || fileList.length === 0) {
            console.log("No G-code files found.");
            return [];
        }
        return fileList;
    }


    // Moved function outside of the `GcodeScannerViewModel` to avoid redefining it on every instance.
    // Source https://github.com/ieatacid/OctoPrint-GcodeEditor/blob/master/octoprint_GcodeEditor/static/js/GcodeEditor.js
    function getRootFilePath() {
        var entry = self.File.listHelper.allItems[0];
        if (entry && !entry.hasOwnProperty("parent")) {
            var root = { children: {} };
            // üîπ FIX: Added `{}` to properly format the loop.
            for (var index in self.files.listHelper.allItems) {
                root.children[index] = self.files.listHelper.allItems[index];
            }
            return root;
        }
        while (entry && entry.hasOwnProperty("parent") && typeof entry["parent"] !== "undefined") {
            entry = entry["parent"];
        }
        return entry;
    }

    // I removed this function from the `GcodeScannerViewModel` because it is not used right now.
    // Source https://github.com/ieatacid/OctoPrint-GcodeEditor/blob/master/octoprint_GcodeEditor/static/js/GcodeEditor.js
    function getGcodePathAndName(entry, gcodeUrl) {
        if (entry && entry.hasOwnProperty("children")) {
            for (var child in entry.children) {
                var value = getGcodePathAndName(entry.children[child], gcodeUrl);
                if (typeof value !== "undefined") {
                    return value; // üîπ FIX: Missing return statement inside `if`.
                }
            }
        } else if (entry && entry.hasOwnProperty("name") && entry.refs && entry.refs.hasOwnProperty("download") && entry["refs"]["download"] === gcodeUrl) {
            return (typeof self.files.currentPath !== "undefined" ? "/" : "") + 
                (entry.hasOwnProperty("path") ? entry["path"] : entry["name"]);
        }
    }

    OCTOPRINT_VIEWMODELS.push({
        construct: GcodeScannerViewModel,
        dependencies: ["filesViewModel"],
        elements: ["#gcode_scanner_tab"]
    });
});
